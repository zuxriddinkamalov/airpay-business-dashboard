{"version":3,"sources":["webpack:///./node_modules/graphql/language/parser.js","webpack:///./node_modules/graphql/jsutils/invariant.js","webpack:///./node_modules/graphql/error/GraphQLError.js","webpack:///./node_modules/graphql/language/location.js","webpack:///./node_modules/graphql/error/index.js","webpack:///./node_modules/graphql/language/directiveLocation.js","webpack:///./node_modules/graphql/error/locatedError.js","webpack:///./node_modules/graphql/error/syntaxError.js","webpack:///./node_modules/graphql/language/blockStringValue.js","webpack:///./node_modules/graphql/language/source.js","webpack:///./node_modules/graphql-tag/src/index.js","webpack:///./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/builtin/es6/taggedTemplateLiteral.js","webpack:///./node_modules/graphql/error/formatError.js","webpack:///./node_modules/graphql/jsutils/defineToStringTag.js","webpack:///./node_modules/graphql/language/lexer.js","webpack:///./node_modules/graphql/language/kinds.js","webpack:///./node_modules/graphql/error/printError.js"],"names":["Object","defineProperty","exports","value","parse","parseValue","parseType","parseConstValue","parseTypeReference","parseNamedType","_inspect","_interopRequireDefault","__webpack_require__","_source","_error","_lexer","_kinds","_directiveLocation","obj","__esModule","default","source","options","sourceObj","Source","TypeError","concat","lexer","createLexer","parseDocument","expect","TokenKind","SOF","parseValueLiteral","EOF","type","parseName","token","NAME","kind","Kind","loc","start","DOCUMENT","definitions","many","parseDefinition","peek","parseExecutableDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","BRACE_L","peekDescription","unexpected","parseOperationDefinition","parseFragmentDefinition","OPERATION_DEFINITION","operation","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","PAREN_L","parseVariableDefinition","PAREN_R","experimentalVariableDefinitionDirectives","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","skip","EQUALS","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","alias","nameOrAlias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","typeCondition","FRAGMENT_SPREAD","parseFragmentName","advance","INLINE_FRAGMENT","expectKeyword","experimentalFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","block","parseValueValue","LIST","values","any","BRACKET_R","fields","push","parseObjectField","OBJECT","OBJECT_FIELD","AT","parseDirective","DIRECTIVE","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","description","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","types","AMP","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","ENUM_VALUE_DEFINITION","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","DirectiveLocation","hasOwnProperty","startToken","noLocation","Loc","lastToken","endToken","this","end","match","syntaxError","getTokenDesc","atToken","openKind","parseFn","closeKind","nodes","prototype","toJSON","inspect","invariant","condition","message","Error","GraphQLError","_printError","_location","positions","path","originalError","extensions","_nodes","Array","isArray","node","_locations","_positions","reduce","list","map","pos","getLocation","_extensions","defineProperties","enumerable","writable","Boolean","stack","configurable","captureStackTrace","create","constructor","toString","printError","position","lineRegexp","line","column","exec","body","index","get","_GraphQLError","_syntaxError","_locatedError","locatedError","_formatError","formatError","freeze","QUERY","MUTATION","SUBSCRIPTION","SCHEMA","SCALAR","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","blockStringValue","rawString","lines","split","commonIndent","i","indent","leadingWhitespace","_i","slice","isBlank","shift","pop","join","str","_invariant","_defineToStringTag","_defineProperty","key","locationOffset","parser","normalize","string","replace","trim","docCache","fragmentSourceMap","cacheKeyFromLoc","substring","resetCaches","printFragmentWarnings","processFragments","ast","astFragmentMap","fragmentDefinition","fragmentName","sourceKey","console","warn","disableFragmentWarnings","stripLoc","doc","removeLocAtThisLevel","docType","call","d","valueType","keys","cacheKey","parsed","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","gql","literals","result","module","_taggedTemplateLiteral","strings","raw","__webpack_exports__","error","applyToStringTag","classObject","Symbol","toStringTag","_blockStringValue","startOfFileToken","Tok","lineStart","advanceLexer","next","readToken","COMMENT","charCodeAt","String","prev","printCharCode","code","isNaN","JSON","stringify","fromCharCode","toUpperCase","bodyLength","positionAfterWhitespace","col","readComment","readName","readNumber","readBlockString","readString","unexpectedCharacterMessage","startPosition","firstCode","isFloat","readDigits","chunkStart","charCode","uniCharCode","rawValue","a","b","c","char2hex","printedLocations","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","done","highlightSourceAtLocation","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","location","firstLineColumnOffset","whitespace","lineIndex","lineOffset","lineNum","columnOffset","columnNum","printPrefixedLines","existingLines","filter","_ref","padLen","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_ref4","prefix","Math","max","_ref3","lpad","len"],"mappings":"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","file":"js/chunk-653b9087.cfd2790f.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = parse;\nexports.parseValue = parseValue;\nexports.parseType = parseType;\nexports.parseConstValue = parseConstValue;\nexports.parseTypeReference = parseTypeReference;\nexports.parseNamedType = parseNamedType;\n\nvar _inspect = _interopRequireDefault(require(\"../jsutils/inspect\"));\n\nvar _source = require(\"./source\");\n\nvar _error = require(\"../error\");\n\nvar _lexer = require(\"./lexer\");\n\nvar _kinds = require(\"./kinds\");\n\nvar _directiveLocation = require(\"./directiveLocation\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nfunction parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n\n  if (!(sourceObj instanceof _source.Source)) {\n    throw new TypeError(\"Must provide Source. Received: \".concat((0, _inspect.default)(sourceObj)));\n  }\n\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\n\nfunction parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  expect(lexer, _lexer.TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, _lexer.TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\n\nfunction parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  expect(lexer, _lexer.TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, _lexer.TokenKind.EOF);\n  return type;\n}\n/**\n * Converts a name lex token into a name parse node.\n */\n\n\nfunction parseName(lexer) {\n  var token = expect(lexer, _lexer.TokenKind.NAME);\n  return {\n    kind: _kinds.Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n} // Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\n\n\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.DOCUMENT,\n    definitions: many(lexer, _lexer.TokenKind.SOF, parseDefinition, _lexer.TokenKind.EOF),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n *   - TypeSystemExtension\n */\n\n\nfunction parseDefinition(lexer) {\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'directive':\n        return parseTypeSystemDefinition(lexer);\n\n      case 'extend':\n        return parseTypeSystemExtension(lexer);\n    }\n  } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\n\n\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n} // Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\n\n\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n\n  if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return {\n      kind: _kinds.Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var operation = parseOperationType(lexer);\n  var name;\n\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationType : one of query mutation subscription\n */\n\n\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, _lexer.TokenKind.NAME);\n\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n\n    case 'mutation':\n      return 'mutation';\n\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\n\n\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, parseVariableDefinition, _lexer.TokenKind.PAREN_R) : [];\n}\n/**\n * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n\n  if (lexer.options.experimentalVariableDefinitionDirectives) {\n    return {\n      kind: _kinds.Kind.VARIABLE_DEFINITION,\n      variable: parseVariable(lexer),\n      type: (expect(lexer, _lexer.TokenKind.COLON), parseTypeReference(lexer)),\n      defaultValue: skip(lexer, _lexer.TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n      directives: parseDirectives(lexer, true),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: _kinds.Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, _lexer.TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, _lexer.TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Variable : $ Name\n */\n\n\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.DOLLAR);\n  return {\n    kind: _kinds.Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * SelectionSet : { Selection+ }\n */\n\n\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.SELECTION_SET,\n    selections: many(lexer, _lexer.TokenKind.BRACE_L, parseSelection, _lexer.TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\n\n\nfunction parseSelection(lexer) {\n  return peek(lexer, _lexer.TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\n\n\nfunction parseField(lexer) {\n  var start = lexer.token;\n  var nameOrAlias = parseName(lexer);\n  var alias;\n  var name;\n\n  if (skip(lexer, _lexer.TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: _kinds.Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, _lexer.TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\n\n\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, item, _lexer.TokenKind.PAREN_R) : [];\n}\n/**\n * Argument[Const] : Name : Value[?Const]\n */\n\n\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\n\n\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.SPREAD);\n\n  if (peek(lexer, _lexer.TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: _kinds.Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var typeCondition;\n\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\n\n\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: _kinds.Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: _kinds.Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentName : Name but not `on`\n */\n\n\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n\n  return parseName(lexer);\n} // Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\n\n\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n\n  switch (token.kind) {\n    case _lexer.TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n\n    case _lexer.TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n\n    case _lexer.TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case _lexer.TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case _lexer.TokenKind.STRING:\n    case _lexer.TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n\n    case _lexer.TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: _kinds.Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: _kinds.Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case _lexer.TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n\n      break;\n  }\n\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: _kinds.Kind.STRING,\n    value: token.value,\n    block: token.kind === _lexer.TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nfunction parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\n\n\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: _kinds.Kind.LIST,\n    values: any(lexer, _lexer.TokenKind.BRACKET_L, item, _lexer.TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\n\n\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.BRACE_L);\n  var fields = [];\n\n  while (!skip(lexer, _lexer.TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n\n  return {\n    kind: _kinds.Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\n\n\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\n\n\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n\n  while (peek(lexer, _lexer.TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n\n  return directives;\n}\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\n\n\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.AT);\n  return {\n    kind: _kinds.Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\n\n\nfunction parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type;\n\n  if (skip(lexer, _lexer.TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, _lexer.TokenKind.BRACKET_R);\n    type = {\n      kind: _kinds.Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n\n  if (skip(lexer, _lexer.TokenKind.BANG)) {\n    return {\n      kind: _kinds.Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n\n  return type;\n}\n/**\n * NamedType : Name\n */\n\n\nfunction parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\n\n\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === _lexer.TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, _lexer.TokenKind.STRING) || peek(lexer, _lexer.TokenKind.BLOCK_STRING);\n}\n/**\n * Description : StringValue\n */\n\n\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\n\n\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, _lexer.TokenKind.BRACE_L, parseOperationTypeDefinition, _lexer.TokenKind.BRACE_R);\n  return {\n    kind: _kinds.Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\n\n\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\n\n\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\n\n\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n\n  if (lexer.token.value === 'implements') {\n    lexer.advance(); // Optional leading ampersand\n\n    skip(lexer, _lexer.TokenKind.AMP);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, _lexer.TokenKind.AMP) || // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, _lexer.TokenKind.NAME));\n  }\n\n  return types;\n}\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\n\n\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, _lexer.TokenKind.BRACE_L) && lexer.lookahead().kind === _lexer.TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseFieldDefinition, _lexer.TokenKind.BRACE_R) : [];\n}\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\n\n\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\n\n\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, _lexer.TokenKind.PAREN_L)) {\n    return [];\n  }\n\n  return many(lexer, _lexer.TokenKind.PAREN_L, parseInputValueDef, _lexer.TokenKind.PAREN_R);\n}\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue;\n\n  if (skip(lexer, _lexer.TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\n\n\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: _kinds.Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\n\n\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n\n  if (skip(lexer, _lexer.TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, _lexer.TokenKind.PIPE);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, _lexer.TokenKind.PIPE));\n  }\n\n  return types;\n}\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\n\n\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: _kinds.Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\n\n\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseEnumValueDefinition, _lexer.TokenKind.BRACE_R) : [];\n}\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\n\n\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\n\n\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\n\n\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseInputValueDef, _lexer.TokenKind.BRACE_R) : [];\n}\n/**\n * TypeSystemExtension :\n *   - SchemaExtension\n *   - TypeExtension\n *\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\n\n\nfunction parseTypeSystemExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === _lexer.TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaExtension(lexer);\n\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n/**\n * SchemaExtension :\n *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n *  - extend schema Directives[Const]\n */\n\n\nfunction parseSchemaExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseOperationTypeDefinition, _lexer.TokenKind.BRACE_R) : [];\n\n  if (directives.length === 0 && operationTypes.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.SCHEMA_EXTENSION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\n\n\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\n\n\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\n\n\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\n\n\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\n\n\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\n\n\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\n\n\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, _lexer.TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: _kinds.Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\n\n\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, _lexer.TokenKind.PIPE);\n  var locations = [];\n\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, _lexer.TokenKind.PIPE));\n\n  return locations;\n}\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\n\n\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n\n  if (_directiveLocation.DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n\n  throw unexpected(lexer, start);\n} // Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\n\n\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return {\n    start: this.start,\n    end: this.end\n  };\n};\n/**\n * Determines if the next token is of a given kind\n */\n\n\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\n\n\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n\n  if (match) {\n    lexer.advance();\n  }\n\n  return match;\n}\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\n\n\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n\n  throw (0, _error.syntaxError)(lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat((0, _lexer.getTokenDesc)(token)));\n}\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and return\n * false.\n */\n\n\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n\n  if (token.kind === _lexer.TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n\n  throw (0, _error.syntaxError)(lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat((0, _lexer.getTokenDesc)(token)));\n}\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\n\n\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return (0, _error.syntaxError)(lexer.source, token.start, \"Unexpected \".concat((0, _lexer.getTokenDesc)(token)));\n}\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = invariant;\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nfunction invariant(condition, message) {\n  /* istanbul ignore else */\n  if (!condition) {\n    throw new Error(message);\n  }\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLError = GraphQLError;\n\nvar _printError = require(\"./printError\");\n\nvar _location = require(\"../language/location\");\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nfunction GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError, extensions) {\n  // Compute list of blame nodes.\n  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n  var _source = source;\n\n  if (!_source && _nodes) {\n    var node = _nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n\n  if (!_positions && _nodes) {\n    _positions = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(node.loc.start);\n      }\n\n      return list;\n    }, []);\n  }\n\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations;\n\n  if (positions && source) {\n    _locations = positions.map(function (pos) {\n      return (0, _location.getLocation)(source, pos);\n    });\n  } else if (_nodes) {\n    _locations = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push((0, _location.getLocation)(node.loc.source, node.loc.start));\n      }\n\n      return list;\n    }, []);\n  }\n\n  var _extensions = extensions || originalError && originalError.extensions;\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_locations)\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(path)\n    },\n    nodes: {\n      value: _nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    },\n    extensions: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _extensions || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_extensions)\n    }\n  }); // Include (non-enumerable) stack trace.\n\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n}\n\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: GraphQLError\n  },\n  name: {\n    value: 'GraphQLError'\n  },\n  toString: {\n    value: function toString() {\n      return (0, _printError.printError)(this);\n    }\n  }\n});","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLocation = getLocation;\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nfunction getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"GraphQLError\", {\n  enumerable: true,\n  get: function get() {\n    return _GraphQLError.GraphQLError;\n  }\n});\nObject.defineProperty(exports, \"syntaxError\", {\n  enumerable: true,\n  get: function get() {\n    return _syntaxError.syntaxError;\n  }\n});\nObject.defineProperty(exports, \"locatedError\", {\n  enumerable: true,\n  get: function get() {\n    return _locatedError.locatedError;\n  }\n});\nObject.defineProperty(exports, \"printError\", {\n  enumerable: true,\n  get: function get() {\n    return _printError.printError;\n  }\n});\nObject.defineProperty(exports, \"formatError\", {\n  enumerable: true,\n  get: function get() {\n    return _formatError.formatError;\n  }\n});\n\nvar _GraphQLError = require(\"./GraphQLError\");\n\nvar _syntaxError = require(\"./syntaxError\");\n\nvar _locatedError = require(\"./locatedError\");\n\nvar _printError = require(\"./printError\");\n\nvar _formatError = require(\"./formatError\");","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectiveLocation = void 0;\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */\n\nexports.DirectiveLocation = DirectiveLocation;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.locatedError = locatedError;\n\nvar _GraphQLError = require(\"./GraphQLError\");\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Given an arbitrary Error, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\nfunction locatedError(originalError, nodes, path) {\n  // Note: this uses a brand-check to support GraphQL errors originating from\n  // other contexts.\n  if (originalError && Array.isArray(originalError.path)) {\n    return originalError;\n  }\n\n  return new _GraphQLError.GraphQLError(originalError && originalError.message, originalError && originalError.nodes || nodes, originalError && originalError.source, originalError && originalError.positions, path, originalError);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.syntaxError = syntaxError;\n\nvar _GraphQLError = require(\"./GraphQLError\");\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\nfunction syntaxError(source, position, description) {\n  return new _GraphQLError.GraphQLError(\"Syntax Error: \".concat(description), undefined, source, [position]);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = blockStringValue;\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nfunction blockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent < line.length && (commonIndent === null || indent < commonIndent)) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  if (commonIndent) {\n    for (var _i = 1; _i < lines.length; _i++) {\n      lines[_i] = lines[_i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Source = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"../jsutils/invariant\"));\n\nvar _defineToStringTag = _interopRequireDefault(require(\"../jsutils/defineToStringTag\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\nvar Source = function Source(body, name, locationOffset) {\n  _defineProperty(this, \"body\", void 0);\n\n  _defineProperty(this, \"name\", void 0);\n\n  _defineProperty(this, \"locationOffset\", void 0);\n\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  !(this.locationOffset.line > 0) ? (0, _invariant.default)(0, 'line in locationOffset is 1-indexed and must be positive') : void 0;\n  !(this.locationOffset.column > 0) ? (0, _invariant.default)(0, 'column in locationOffset is 1-indexed and must be positive') : void 0;\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\n\nexports.Source = Source;\n(0, _defineToStringTag.default)(Source);","var parser = require('graphql/language/parser');\n\nvar parse = parser.parse;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\n// A map docString -> graphql document\nvar docCache = {};\n\n// A map fragmentName -> [normalized source]\nvar fragmentSourceMap = {};\n\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// For testing.\nfunction resetCaches() {\n  docCache = {};\n  fragmentSourceMap = {};\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nvar printFragmentWarnings = true;\nfunction processFragments(ast) {\n  var astFragmentMap = {};\n  var definitions = [];\n\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var fragmentDefinition = ast.definitions[i];\n\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n\n      // We know something about this fragment\n      if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {\n\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n\n      } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {\n        fragmentSourceMap[fragmentName] = {};\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      }\n\n      if (!astFragmentMap[sourceKey]) {\n        astFragmentMap[sourceKey] = true;\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  }\n\n  ast.definitions = definitions;\n  return ast;\n}\n\nfunction disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nfunction stripLoc(doc, removeLocAtThisLevel) {\n  var docType = Object.prototype.toString.call(doc);\n\n  if (docType === '[object Array]') {\n    return doc.map(function (d) {\n      return stripLoc(d, removeLocAtThisLevel);\n    });\n  }\n\n  if (docType !== '[object Object]') {\n    throw new Error('Unexpected input.');\n  }\n\n  // We don't want to remove the root loc field so we can use it\n  // for fragment substitution (see below)\n  if (removeLocAtThisLevel && doc.loc) {\n    delete doc.loc;\n  }\n\n  // https://github.com/apollographql/graphql-tag/issues/40\n  if (doc.loc) {\n    delete doc.loc.startToken;\n    delete doc.loc.endToken;\n  }\n\n  var keys = Object.keys(doc);\n  var key;\n  var value;\n  var valueType;\n\n  for (key in keys) {\n    if (keys.hasOwnProperty(key)) {\n      value = doc[keys[key]];\n      valueType = Object.prototype.toString.call(value);\n\n      if (valueType === '[object Object]' || valueType === '[object Array]') {\n        doc[keys[key]] = stripLoc(value, true);\n      }\n    }\n  }\n\n  return doc;\n}\n\nvar experimentalFragmentVariables = false;\nfunction parseDocument(doc) {\n  var cacheKey = normalize(doc);\n\n  if (docCache[cacheKey]) {\n    return docCache[cacheKey];\n  }\n\n  var parsed = parse(doc, { experimentalFragmentVariables: experimentalFragmentVariables });\n  if (!parsed || parsed.kind !== 'Document') {\n    throw new Error('Not a valid GraphQL document.');\n  }\n\n  // check that all \"new\" fragments inside the documents are consistent with\n  // existing fragments of the same name\n  parsed = processFragments(parsed);\n  parsed = stripLoc(parsed, false);\n  docCache[cacheKey] = parsed;\n\n  return parsed;\n}\n\nfunction enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nfunction disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nfunction gql(/* arguments */) {\n  var args = Array.prototype.slice.call(arguments);\n\n  var literals = args[0];\n\n  // We always get literals[0] and then matching post literals for each arg given\n  var result = (typeof(literals) === \"string\") ? literals : literals[0];\n\n  for (var i = 1; i < args.length; i++) {\n    if (args[i] && args[i].kind && args[i].kind === 'Document') {\n      result += args[i].loc.source.body;\n    } else {\n      result += args[i];\n    }\n\n    result += literals[i];\n  }\n\n  return parseDocument(result);\n}\n\n// Support typescript, which isn't as nice as Babel about default exports\ngql.default = gql;\ngql.resetCaches = resetCaches;\ngql.disableFragmentWarnings = disableFragmentWarnings;\ngql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;\ngql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;\n\nmodule.exports = gql;\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatError = formatError;\n\nvar _invariant = _interopRequireDefault(require(\"../jsutils/invariant\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n */\nfunction formatError(error) {\n  !error ? (0, _invariant.default)(0, 'Received null or undefined error.') : void 0;\n  var message = error.message || 'An unknown error occurred.';\n  var locations = error.locations;\n  var path = error.path;\n  var extensions = error.extensions;\n  return extensions ? {\n    message: message,\n    locations: locations,\n    path: path,\n    extensions: extensions\n  } : {\n    message: message,\n    locations: locations,\n    path: path\n  };\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = applyToStringTag;\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * The `applyToStringTag()` function checks first to see if the runtime\n * supports the `Symbol` class and then if the `Symbol.toStringTag` constant\n * is defined as a `Symbol` instance. If both conditions are met, the\n * Symbol.toStringTag property is defined as a getter that returns the\n * supplied class constructor's name.\n *\n * @method applyToStringTag\n *\n * @param {Class<any>} classObject a class such as Object, String, Number but\n * typically one of your own creation through the class keyword; `class A {}`,\n * for example.\n */\nfunction applyToStringTag(classObject) {\n  if (typeof Symbol === 'function' && Symbol.toStringTag) {\n    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {\n      get: function get() {\n        return this.constructor.name;\n      }\n    });\n  }\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLexer = createLexer;\nexports.getTokenDesc = getTokenDesc;\nexports.TokenKind = void 0;\n\nvar _error = require(\"../error\");\n\nvar _blockStringValue = _interopRequireDefault(require(\"./blockStringValue\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\nfunction createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n\nexports.TokenKind = TokenKind;\n\n/**\n * A helper function to describe a token as a string for debugging\n */\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\n\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nTok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n};\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace and comments until it finds the next lexable\n * token, then lexes punctuators immediately or calls the appropriate helper\n * function for more complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = charCodeAt.call(body, pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw (0, _error.syntaxError)(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * or commented character, then returns the position of that character for\n * lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n\n    if (code >= 48 && code <= 57) {\n      throw (0, _error.syntaxError)(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw (0, _error.syntaxError)(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw (0, _error.syntaxError)(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n\n          if (charCode < 0) {\n            throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: ' + \"\\\\u\".concat(body.slice(position + 1, position + 5), \".\"));\n          }\n\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n\n        default:\n          throw (0, _error.syntaxError)(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw (0, _error.syntaxError)(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {\n      rawValue += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, (0, _blockStringValue.default)(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw (0, _error.syntaxError)(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    } // Escape Triple-Quote (\\\"\"\")\n\n\n    if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {\n      rawValue += slice.call(body, chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw (0, _error.syntaxError)(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Kind = void 0;\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */\n\nexports.Kind = Kind;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.printError = printError;\n\nvar _location = require(\"../language/location\");\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\nfunction printError(error) {\n  var printedLocations = [];\n\n  if (error.nodes) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = error.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var node = _step.value;\n\n        if (node.loc) {\n          printedLocations.push(highlightSourceAtLocation(node.loc.source, (0, _location.getLocation)(node.loc.source, node.loc.start)));\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  } else if (error.source && error.locations) {\n    var source = error.source;\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = error.locations[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var location = _step2.value;\n        printedLocations.push(highlightSourceAtLocation(source, location));\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n\n  return printedLocations.length === 0 ? error.message : [error.message].concat(printedLocations).join('\\n\\n') + '\\n';\n}\n/**\n * Render a helpful description of the location of the error in the GraphQL\n * Source document.\n */\n\n\nfunction highlightSourceAtLocation(source, location) {\n  var firstLineColumnOffset = source.locationOffset.column - 1;\n  var body = whitespace(firstLineColumnOffset) + source.body;\n  var lineIndex = location.line - 1;\n  var lineOffset = source.locationOffset.line - 1;\n  var lineNum = location.line + lineOffset;\n  var columnOffset = location.line === 1 ? firstLineColumnOffset : 0;\n  var columnNum = location.column + columnOffset;\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n  return \"\".concat(source.name, \" (\").concat(lineNum, \":\").concat(columnNum, \")\\n\") + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [\"\".concat(lineNum - 1, \": \"), lines[lineIndex - 1]], [\"\".concat(lineNum, \": \"), lines[lineIndex]], ['', whitespace(columnNum - 1) + '^'], [\"\".concat(lineNum + 1, \": \"), lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  var existingLines = lines.filter(function (_ref) {\n    var _ = _ref[0],\n        line = _ref[1];\n    return line !== undefined;\n  });\n  var padLen = 0;\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = existingLines[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var _ref4 = _step3.value;\n      var prefix = _ref4[0];\n      padLen = Math.max(padLen, prefix.length);\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  return existingLines.map(function (_ref3) {\n    var prefix = _ref3[0],\n        line = _ref3[1];\n    return lpad(padLen, prefix) + line;\n  }).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction lpad(len, str) {\n  return whitespace(len - str.length) + str;\n}"],"sourceRoot":""}